public class AccountTriggerHandler {
    public static void setShippingAddress(List<account> newAccounts) {
        for (account acc : newAccounts) {
        	if ((acc.BillingCountry == 'US' || acc.BillingCountry == 'CA') && (acc.ShippingCity == null || acc.ShippingStreet == null)) {
            	acc.ShippingStreet = acc.BillingStreet;
            	acc.ShippingCity = acc.BillingCity;
            	acc.ShippingState = acc.BillingState;
            	acc.ShippingPostalCode = acc.BillingPostalCode;
            	acc.ShippingCountry = acc.BillingCountry;
        	}
            if (acc.BillingCountry == 'US' && (acc.Phone.left(2) != '+1' || acc.Phone != null)) {
				acc.Phone.addError('US telephone numbers must be prefixed with the Country Code: +1.');
            }
            if (acc.BillingCountry == 'US' && (acc.Fax.left(2) != '+1' || acc.Fax != null)) {
				acc.Fax.addError('US telephone numbers must be prefixed with the Country Code: +1.');
            }
        }
    }
    
    // When a user updates an existing Account's Billing Address, 
    // the new address should be copied over to the Mailing Address of each of the Contacts related to the Account.    
    
    public static void AfterUpdate(List<account> newList, 
                                                Map<id, account> newMap, 
                                                List<account> oldList, 
                                                Map<id, account> oldMap) {
		Map<id, account> discountChangedMap = new Map<id, account>();
		Map<id, account> billingChangedMap = new Map<id, account>();

		for (account a : newList) {
			if(a.Discount__c != oldMap.get(a.id).Discount__c) {
				discountChangedMap.put(a.id, a);
			}
			if((a.BillingStreet != oldMap.get(a.id).BillingStreet) || (a.BillingCity != oldMap.get(a.id).BillingCity)) {
				billingChangedMap.put(a.id, a);
			}
		}

        List<opportunity> changedOpportunities = new List<opportunity>();
        List<contact> changedContacts = new List<contact>();

        if(!discountChangedMap.isEmpty()) {
            for (opportunity o : [Select Id, Discount__c, AccountId 
                            from opportunity 
                            where account.id IN :discountChangedMap.keyset()
                            ]) {
        		o.Discount__c = discountChangedMap.get(o.AccountId).Discount__c;
            	changedOpportunities.add(o);
			}
            update changedOpportunities;
        }
		
        if(!billingChangedMap.isEmpty()) {
            for (opportunity o : [Select Id, BillingCity, BillingState, BillingCountry, BillingStreet, BillingPostalCode, AccountId 
                            FROM Contacts 
                            WHERE account.id IN :billingChangedMap.keyset()
                            ]) {
        		o.BillingCity = billingChangedMap.get(o.AccountId).BillingCity;
        		o.BillingCountry = billingChangedMap.get(o.AccountId).BillingCountry;
        		o.BillingPostalCode = billingChangedMap.get(o.AccountId).BillingPostalCode;
        		o.BillingState = billingChangedMap.get(o.AccountId).BillingState;
        		o.BillingStreet = billingChangedMap.get(o.AccountId).BillingStreet;
            	changedContacts.add(o);
			}
            update changedContacts;
        }  
	}
}